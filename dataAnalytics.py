{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d6a917a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Positive Returns Descriptive Statistics:\n",
      "        daily_return  sentiment_score  intensity_score  ai_emphasis\n",
      "count   2247.000000      2247.000000      2247.000000  2247.000000\n",
      "mean       0.012257         0.513451         0.485349     2.377392\n",
      "std        0.010948         0.990646         0.346567     0.891229\n",
      "min        0.000024        -0.930000        -1.000000     1.000000\n",
      "25%        0.004751         0.360700         0.432000     2.000000\n",
      "50%        0.009208         0.500000         0.500000     2.000000\n",
      "75%        0.016289         0.691050         0.713000     3.000000\n",
      "max        0.064742        45.000000         1.033000     5.000000\n",
      "\n",
      "Negative Returns Descriptive Statistics:\n",
      "        daily_return  sentiment_score  intensity_score  ai_emphasis\n",
      "count   2069.000000      2069.000000      2069.000000  2069.000000\n",
      "mean      -0.012297         0.517168         0.510267     2.366844\n",
      "std        0.011442         0.289568         0.327650     0.902009\n",
      "min       -0.083378        -0.854000        -1.000000     1.000000\n",
      "25%       -0.016378         0.407700         0.500000     2.000000\n",
      "50%       -0.009125         0.531000         0.523000     2.000000\n",
      "75%       -0.003811         0.720000         0.725000     3.000000\n",
      "max        0.000000         1.000000         1.000000     5.000000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the data\n",
    "file_path = '/Users/dwijesh/Desktop/groq/finalTick_with_ai_emphasis.xlsx'\n",
    "sheet1_data = pd.read_excel(file_path, sheet_name='Sheet1')\n",
    "\n",
    "# Create separate dataframes for positive and negative daily returns\n",
    "positive_returns = sheet1_data[sheet1_data['daily_return'] > 0]\n",
    "negative_returns = sheet1_data[sheet1_data['daily_return'] <= 0]\n",
    "\n",
    "# Calculate descriptive statistics for positive returns\n",
    "positive_stats = positive_returns[['daily_return', 'sentiment_score', 'intensity_score', 'ai_emphasis']].describe()\n",
    "\n",
    "# Calculate descriptive statistics for negative returns\n",
    "negative_stats = negative_returns[['daily_return', 'sentiment_score', 'intensity_score', 'ai_emphasis']].describe()\n",
    "\n",
    "# Display the descriptive statistics\n",
    "print(\"Positive Returns Descriptive Statistics:\\n\", positive_stats)\n",
    "print(\"\\nNegative Returns Descriptive Statistics:\\n\", negative_stats)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dd6944ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Daily Returns Pairwise Correlation Coefficients:\n",
      "                 daily_return sentiment_score intensity_score ai_emphasis\n",
      "daily_return             1.0          0.0349         -0.0268      0.0088\n",
      "sentiment_score                          1.0          0.2093      0.0253\n",
      "intensity_score                                          1.0      0.0641\n",
      "ai_emphasis                                                          1.0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Function to calculate pairwise correlation\n",
    "def pwcorr(df, method='pearson'):\n",
    "    df = df.dropna()._get_numeric_data()\n",
    "    df_cols = pd.DataFrame(columns=df.columns)\n",
    "    r = df_cols.transpose().join(df_cols, how='outer')\n",
    "    \n",
    "    for r_idx, r_col in enumerate(df.columns):\n",
    "        for c_idx, c_col in enumerate(df.columns):\n",
    "            if r_idx > c_idx:\n",
    "                r.loc[r_col, c_col] = \"\"\n",
    "            else:\n",
    "                corr_test = df[[r_col, c_col]].corr(method=method).iloc[0,1]\n",
    "                r.loc[r_col, c_col] = round(corr_test, 4)\n",
    "                \n",
    "    return r\n",
    "\n",
    "# Load the data\n",
    "file_path = '/Users/dwijesh/Desktop/groq/finalTick_with_ai_emphasis.xlsx'\n",
    "sheet1_data = pd.read_excel(file_path, sheet_name='Sheet1')\n",
    "\n",
    "# Calculate pairwise correlation for daily returns\n",
    "daily_returns_corr = pwcorr(sheet1_data[['daily_return', 'sentiment_score', 'intensity_score', 'ai_emphasis']])\n",
    "\n",
    "# Display the correlation coefficients\n",
    "print(\"Daily Returns Pairwise Correlation Coefficients:\\n\", daily_returns_corr)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d60f8352",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           daily_return   R-squared:                       0.003\n",
      "Model:                            OLS   Adj. R-squared:                  0.002\n",
      "Method:                 Least Squares   F-statistic:                     3.650\n",
      "Date:                Sun, 09 Jun 2024   Prob (F-statistic):             0.0121\n",
      "Time:                        02:21:37   Log-Likelihood:                 11570.\n",
      "No. Observations:                4316   AIC:                        -2.313e+04\n",
      "Df Residuals:                    4312   BIC:                        -2.311e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "const               0.0004      0.001      0.561      0.575      -0.001       0.002\n",
      "sentiment_score     0.0009      0.000      2.714      0.007       0.000       0.002\n",
      "intensity_score    -0.0018      0.001     -2.328      0.020      -0.003      -0.000\n",
      "ai_emphasis         0.0002      0.000      0.660      0.509      -0.000       0.001\n",
      "==============================================================================\n",
      "Omnibus:                      164.534   Durbin-Watson:                   0.799\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              481.310\n",
      "Skew:                          -0.081   Prob(JB):                    3.05e-105\n",
      "Kurtosis:                       4.628   Cond. No.                         10.3\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Load the data\n",
    "file_path = '/Users/dwijesh/Desktop/groq/finalTick_with_ai_emphasis.xlsx'\n",
    "data = pd.read_excel(file_path, sheet_name='Sheet1')\n",
    "\n",
    "# Define the dependent and independent variables\n",
    "X = data[['sentiment_score', 'intensity_score', 'ai_emphasis']]\n",
    "y = data['daily_return']\n",
    "\n",
    "# Add a constant to the independent variables matrix\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit the model\n",
    "model = sm.OLS(y, X).fit()\n",
    "\n",
    "# Print the summary\n",
    "print(model.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "397d3a58",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.691568\n",
      "         Iterations 4\n",
      "                            Logit Regression Results                            \n",
      "================================================================================\n",
      "Dep. Variable:     daily_return_encoded   No. Observations:                 4316\n",
      "Model:                            Logit   Df Residuals:                     4312\n",
      "Method:                             MLE   Df Model:                            3\n",
      "Date:                  Sun, 09 Jun 2024   Pseudo R-squ.:                0.001053\n",
      "Time:                          02:22:58   Log-Likelihood:                -2984.8\n",
      "converged:                         True   LL-Null:                       -2988.0\n",
      "Covariance Type:              nonrobust   LLR p-value:                   0.09825\n",
      "===================================================================================\n",
      "                      coef    std err          z      P>|z|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "const               0.1455      0.096      1.517      0.129      -0.042       0.333\n",
      "sentiment_score     0.0150      0.044      0.338      0.735      -0.072       0.102\n",
      "intensity_score    -0.2294      0.093     -2.463      0.014      -0.412      -0.047\n",
      "ai_emphasis         0.0183      0.034      0.538      0.591      -0.048       0.085\n",
      "===================================================================================\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Load the data\n",
    "file_path = '/Users/dwijesh/Desktop/groq/finalTick_with_ai_emphasis.xlsx'\n",
    "data = pd.read_excel(file_path, sheet_name='Sheet1')\n",
    "\n",
    "# Define the dependent and independent variables\n",
    "X = data[['sentiment_score', 'intensity_score', 'ai_emphasis']]\n",
    "y = data['daily_return_encoded']\n",
    "\n",
    "# Add a constant to the independent variables matrix\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit the logistic regression model\n",
    "model = sm.Logit(y, X).fit()\n",
    "\n",
    "# Print the summary\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3b3c197c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:           daily_return   R-squared:                       0.003\n",
      "Model:                            OLS   Adj. R-squared:                  0.002\n",
      "Method:                 Least Squares   F-statistic:                     3.650\n",
      "Date:                Sun, 09 Jun 2024   Prob (F-statistic):             0.0121\n",
      "Time:                        08:49:51   Log-Likelihood:                 11570.\n",
      "No. Observations:                4316   AIC:                        -2.313e+04\n",
      "Df Residuals:                    4312   BIC:                        -2.311e+04\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "const               0.0004      0.001      0.561      0.575      -0.001       0.002\n",
      "sentiment_score     0.0009      0.000      2.714      0.007       0.000       0.002\n",
      "intensity_score    -0.0018      0.001     -2.328      0.020      -0.003      -0.000\n",
      "ai_emphasis         0.0002      0.000      0.660      0.509      -0.000       0.001\n",
      "==============================================================================\n",
      "Omnibus:                      164.534   Durbin-Watson:                   0.799\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              481.310\n",
      "Skew:                          -0.081   Prob(JB):                    3.05e-105\n",
      "Kurtosis:                       4.628   Cond. No.                         10.3\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# Load the data\n",
    "file_path = '/Users/dwijesh/Desktop/groq/finalTick_with_ai_emphasis.xlsx'\n",
    "data = pd.read_excel(file_path, sheet_name='Sheet1')\n",
    "\n",
    "# Define the dependent and independent variables\n",
    "X = data[['sentiment_score', 'intensity_score', 'ai_emphasis']]\n",
    "y = data['daily_return']\n",
    "\n",
    "# Add a constant to the independent variables matrix\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Fit the model\n",
    "model = sm.OLS(y, X).fit()\n",
    "\n",
    "# Print the summary\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13ae3aef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the Excel file\n",
    "file_path = '/Users/dwijesh/Desktop/groq/finalTick_with_ai_emphasis.xlsx'\n",
    "data = pd.read_excel(file_path)\n",
    "\n",
    "# Create a binary variable for daily_return\n",
    "data['daily_return_encoded'] = (data['daily_return'] > 0).astype(int)\n",
    "\n",
    "# Count the number of 1s and 0s for each emotion\n",
    "emotion_counts_simplified = data.groupby(['emotion', 'daily_return_encoded']).size().unstack(fill_value=0)\n",
    "\n",
    "# Filter to include only the top 10 emotions based on overall counts\n",
    "top_emotions = emotion_counts_simplified.sum(axis=1).nlargest(10).index\n",
    "emotion_counts_top_10 = emotion_counts_simplified.loc[top_emotions]\n",
    "\n",
    "# Plot the number of 1s and 0s for each of the top 10 emotions as a grouped bar graph\n",
    "emotion_counts_top_10.plot(kind='bar', stacked=False, figsize=(15, 8))\n",
    "plt.title('Number of Positive (1) and Negative (0) Returns by Top 10 Emotions')\n",
    "plt.xlabel('Emotion')\n",
    "plt.ylabel('Count')\n",
    "plt.legend(title='Daily Return Encoded', labels=['0 (Negative)', '1 (Positive)'])\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
